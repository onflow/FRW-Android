plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id("kotlin-parcelize")
    id "org.jetbrains.kotlin.plugin.serialization" version "1.9.0"
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id("instabug-apm")
    id 'com.google.devtools.ksp'
    id 'com.google.firebase.appdistribution'
//    id 'com.google.ar.sceneform.plugin'
}

def properties = new Properties()
def inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)

def apiKeysFile = project.rootProject.file("key.properties")
def apiKeys = new Properties()
if (apiKeysFile.exists()) {
    apiKeysFile.withInputStream { input ->
        apiKeys.load(input)
    }
}
def dropboxKeyDev = apiKeys.getProperty("DROPBOX_APP_KEY_DEV") ?: "fallbackDevKey"
def dropboxKeyProd = apiKeys.getProperty("DROPBOX_APP_KEY_PROD") ?: "fallbackProdKey"

android {
    compileSdk 34

    defaultConfig {
        applicationId "com.flowfoundation.wallet"
        minSdk 26
        targetSdk 34
        versionCode vCode as Integer
        versionName vName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "DRIVE_AES_IV", "\"${apiKeys.getProperty('DRIVE_AES_IV')}\"")
        buildConfigField("String", "DRIVE_AES_KEY", "\"${apiKeys.getProperty('DRIVE_AES_KEY')}\"")
        buildConfigField("String", "WALLET_CONNECT_PROJECT_ID", "\"${apiKeys.getProperty('WALLET_CONNECT_PROJECT_ID')}\"")
        buildConfigField("String", "INSTABUG_TOKEN_DEV", "\"${apiKeys.getProperty('INSTABUG_TOKEN_DEV')}\"")
        buildConfigField("String", "INSTABUG_TOKEN_PROD", "\"${apiKeys.getProperty('INSTABUG_TOKEN_PROD')}\"")
        buildConfigField("String", "CROWDIN_PROJECT_ID", "\"${apiKeys.getProperty('CROWDIN_PROJECT_ID')}\"")
        buildConfigField("String", "CROWDIN_API_TOKEN", "\"${apiKeys.getProperty('CROWDIN_API_TOKEN')}\"")
        buildConfigField("String", "CROWDIN_DISTRIBUTION", "\"${apiKeys.getProperty('CROWDIN_DISTRIBUTION')}\"")
        buildConfigField("String", "MIXPANEL_TOKEN_DEV", "\"${apiKeys.getProperty('MIXPANEL_TOKEN_DEV')}\"")
        buildConfigField("String", "MIXPANEL_TOKEN_PROD", "\"${apiKeys.getProperty('MIXPANEL_TOKEN_PROD')}\"")
        buildConfigField("String", "DROPBOX_APP_KEY", "\"${dropboxKeyProd}\"")
        manifestPlaceholders = [dropboxKey: dropboxKeyProd]
    }

    def keyAliasProperty = properties.getProperty("keyAlias", "androiddebugkey")
    def keyPasswordProperty = properties.getProperty("keyPassword", "android")
    def storePasswordProperty = properties.getProperty("storePassword", "android")
    def storeFilePath = properties.getProperty("storeFile", rootProject.file("app/debug.keystore").absolutePath)

    signingConfigs {
        release {
            storeFile = file(storeFilePath)
            storePassword = storePasswordProperty
            keyAlias = keyAliasProperty
            keyPassword = keyPasswordProperty
        }
        dev {
            storeFile = file(storeFilePath)
            storePassword = storePasswordProperty
            keyAlias = keyAliasProperty
            keyPassword = keyPasswordProperty
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            multiDexEnabled true
            debuggable true
            applicationIdSuffix = ".dev"
            buildConfigField("String", "DROPBOX_APP_KEY", "\"${dropboxKeyDev}\"")
            manifestPlaceholders = [dropboxKey: dropboxKeyDev]
        }

        releaseDebug {
            minifyEnabled false
            multiDexEnabled true
            debuggable true
            signingConfig signingConfigs.release
            matchingFallbacks = ['release']
            buildConfigField("String", "DROPBOX_APP_KEY", "\"${dropboxKeyProd}\"")
            manifestPlaceholders = [dropboxKey: dropboxKeyProd]
        }

        dev {
            minifyEnabled true
            shrinkResources true
            multiDexEnabled false
            debuggable false
            applicationIdSuffix = ".dev"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug', 'qa', 'release']

            firebaseAppDistribution {
                artifactType = "APK"
                releaseNotes = "Automatic build from CI/CD pipeline."
                serviceCredentialsFile = properties.getProperty("serviceCredentialsFile", "")
                testers = properties.getProperty("testers", "")
            }
            buildConfigField("String", "DROPBOX_APP_KEY", "\"${dropboxKeyDev}\"")
            manifestPlaceholders = [dropboxKey: dropboxKeyDev]
        }

        release {
            minifyEnabled true
            shrinkResources true
            multiDexEnabled false
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
            buildConfigField("String", "DROPBOX_APP_KEY", "\"${dropboxKeyProd}\"")
            manifestPlaceholders = [dropboxKey: dropboxKeyProd]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.0"
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        compose true
        viewBinding true
        dataBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/io.netty.versions.properties', 'META-INF/INDEX.LIST', 'META-INF/DEPENDENCIES', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'project.properties', 'META-INF/rxjava.properties', 'META-INF/ASL2.0', 'META-INF/atomicfu.kotlin_module']
        }
    }


    namespace 'com.flowfoundation.wallet'
    lint {
        abortOnError false
    }
}

//configurations.configureEach {
//    resolutionStrategy.eachDependency {
//        if (requested.group == "org.bouncycastle" && requested.name == "bcprov-jdk15on") {
//            useTarget("org.bouncycastle:bcprov-jdk18on:1.77")
//        }
//    }
//}

dependencies {
    api fileTree(dir: "libs", include: ["*.aar", "*.jar"])

    implementation project(':wallet')
    /** Android Architecture **/
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "androidx.dynamicanimation:dynamicanimation:1.0.0"
    implementation 'androidx.core:core-splashscreen:1.0.0-rc01'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'

    // room https://developer.android.google.cn/training/data-storage/room?hl=zh-cn
    implementation "androidx.room:room-runtime:2.5.0"
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    ksp "androidx.room:room-compiler:2.5.0"
    implementation "androidx.room:room-ktx:2.5.0"

    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0'
    implementation 'androidx.lifecycle:lifecycle-process:2.5.0'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'androidx.biometric:biometric:1.2.0-alpha04'
    implementation("androidx.work:work-runtime-ktx:2.7.1")
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    /** Android Architecture **/

    /** Compose **/
    implementation 'androidx.activity:activity-compose:1.9.1'
    implementation 'androidx.compose.ui:ui:1.6.8'
    implementation 'androidx.compose.ui:ui-tooling-preview:1.6.8'
    implementation 'androidx.compose.foundation:foundation:1.6.8'
    implementation 'androidx.compose.material:material:1.6.8'
    implementation 'androidx.compose.runtime:runtime-livedata:1.6.8'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.8.4'
    implementation 'androidx.compose.ui:ui-tooling:1.6.8'

    /** Google Drive **/
    implementation('com.google.api-client:google-api-client:1.23.0') {
        exclude group: 'com.google.guava'
    }
    implementation 'com.google.android.gms:play-services-drive:17.0.0'
    implementation 'com.google.android.gms:play-services-auth:21.0.0'
    implementation 'com.google.http-client:google-http-client:1.40.1'
    implementation 'com.google.api-client:google-api-client-android:1.32.1'
    implementation('com.google.oauth-client:google-oauth-client-jetty:1.23.0') {
        exclude group: 'com.google.guava'
    }
    implementation('com.google.apis:google-api-services-drive:v3-rev110-1.23.0') {
        exclude group: 'com.google.guava'
    }
    implementation 'com.google.android.gms:play-services-maps:18.2.0'
    /** Google Drive **/

    /** ARCore **/
//    implementation 'com.google.ar:core:1.29.0'
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.17.1'
    implementation 'com.google.ar.sceneform:core:1.17.1'
    /** ARCore **/

    /** Kotlin 相关 **/
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0"
    /** Kotlin 相关 **/

    /** firebase **/
    implementation platform('com.google.firebase:firebase-bom:30.2.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
//    implementation ('com.google.firebase:firebase-inappmessaging-display-ktx') {
//        exclude group: 'com.google.protobuf', module: 'protobuf-javalite'
//        exclude group: 'com.google.firebase', module: 'protolite-well-known-types'
//    }
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-functions-ktx'
    implementation 'com.google.firebase:firebase-appcheck-playintegrity'
    implementation 'com.google.firebase:firebase-appcheck'
    implementation 'com.google.firebase:firebase-appcheck-debug'
    /** firebase **/

    implementation "dev.chrisbanes:insetter-ktx:0.3.1"

    implementation 'com.github.bumptech.glide:glide:5.0.0-rc01'
    ksp 'com.github.bumptech.glide:ksp:5.0.0-rc01'
    implementation 'com.caverock:androidsvg-aar:1.4'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.0.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'

    implementation 'com.gitee.zackratos:UltimateBarX:0.6.1'

    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    implementation 'io.github.h07000223:flycoTabLayout:3.0.0'
    implementation 'com.github.chthai64:SwipeRevealLayout:1.4.0'
    implementation 'jp.wasabeef:glide-transformations:4.3.0'

    implementation 'com.github.varunest:sparkbutton:1.0.6'

    implementation 'com.github.li-xiaojun:XPopup:2.9.4'
    implementation 'com.google.android.exoplayer:exoplayer:2.18.0'
    implementation 'com.google.zxing:core:3.4.1'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    implementation 'com.github.Justson.AgentWeb:agentweb-core:v5.0.0-alpha.1-androidx'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'joda-time:joda-time:2.10.3'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'com.airbnb.android:lottie:5.2.0'
    implementation 'androidx.browser:browser:1.4.0'

    /** FLOW **/
    // implementation "com.nftco:flow-jvm-sdk:0.7.3"
    implementation ("com.github.Outblock:flow-jvm-sdk:v0.5.7") {
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
    }
    implementation 'com.github.onflow.flow-kmm:flow:0.0.1'
    implementation 'io.grpc:grpc-okhttp:1.59.0'
    implementation(platform("com.reown:android-bom:1.2.1"))
    implementation("com.reown:android-core") {
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk18on'
    }
    implementation("com.reown:sign") {
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk18on'
    }

    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
    implementation 'com.github.trustwallet:trust-web3-provider:3.0.0'
    implementation 'org.web3j:core:4.8.7-android'
    /** FLOW **/

    implementation 'com.github.translized:android-SDK:1.0.2'

    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation 'com.guolindev.permissionx:permissionx:1.7.1'

    implementation 'com.instabug.library:instabug:13.1.0'

    implementation 'com.github.alexzhirkevich:custom-qr-generator:2.0.0-alpha01'

    /** Dropbox **/
    implementation 'com.dropbox.core:dropbox-core-sdk:7.0.0'
    implementation 'com.dropbox.core:dropbox-android-sdk:7.0.0'

    /** Crowdin **/
    implementation ('com.github.crowdin.mobile-sdk-android:sdk:1.9.2') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    /** Mixpanel **/
    implementation "com.mixpanel.android:mixpanel-android:7.5.4"

    /** TEST **/
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    /** TEST **/
}
